/**
 * MIT License
 *
 * Copyright (c) 2021 Jeroen van Straten
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/** \file
 * Handles parsing NC drill files.
 */

#pragma once

#include <memory>
#include <map>
#include <fstream>
#include "clipper.hpp"
#include "coord.hpp"
#include "plot.hpp"

/**
 * Namespace for parsing NC drill files.
 */
namespace ncdrill {

/**
 * Represents a drill tool.
 */
class Tool {
private:

    /**
     * Diameter of this tool.
     */
    coord::CInt diameter;

    /**
     * Whether this tool generates plated holes.
     */
    bool plated;

public:

    /**
     * Constructs a new tool.
     */
    Tool(coord::CInt diameter, bool plated);

    /**
     * Returns the diameter of this tool.
     */
    coord::CInt get_diameter() const;

    /**
     * Returns whether this tool is plated.
     */
    bool is_plated() const;

};

/**
 * Reference to a tool.
 */
using ToolRef = std::shared_ptr<Tool>;

/**
 * Parsing state
 */
enum class ParseState {

    /**
     * Start of header command has not been seen yet.
     */
    PRE_HEADER,

    /**
     * We're inside the header.
     */
    HEADER,

    /**
     * We're inside the body.
     */
    BODY

};

/**
 * Routing mode.
 */
enum class RoutMode {

    /**
     * We're in drill mode.
     */
    DRILL,

    /**
     * We're in rout mode, and the tool is up.
     */
    ROUT_TOOL_UP,

    /**
     * We're in rout mode, and the tool is down.
     */
    ROUT_TOOL_DOWN

};

/**
 * Parses NC drill files as generated by Altium Designer and/or complying with
 * the XNC specification by Ucamco.
 */
class NCDrill {
private:

    /**
     * Coordinate format.
     */
    coord::Format fmt;

    /**
     * Current parsing state.
     */
    ParseState parse_state;

    /**
     * Whether newly defined tools should be plated.
     */
    bool plated;

    /**
     * Map of all tools defined in the header.
     */
    std::map<size_t, ToolRef> tools;

    /**
     * Pointer to the currently selected tool, if any.
     */
    ToolRef tool;

    /**
     * Current routing mode.
     */
    RoutMode rout_mode;

    /**
     * Current position.
     */
    coord::CPt pos;

    /**
     * Tool path. When commit_path() is called, the path is committed using the
     * current tool.
     */
    coord::Path path;

    /**
     * Plot for plated holes.
     */
    plot::Plot plot_pth;

    /**
     * Plot for non-plated holes.
     */
    plot::Plot plot_npth;

    /**
     * Points where a plated tool have been.
     */
    std::list<coord::CPt> vias;

    /**
     * Commits the path in the path field to the plots and to vias based on the
     * current tool.
     */
    void commit_path();

    /**
     * Adds an arc to the current path.
     */
    void add_arc(coord::CPt start, coord::CPt end, coord::CInt radius, bool ccw);

    /**
     * Parses a regular command, consisting of concatenated letter-number pairs.
     * Throws a std::runtime_error if the command does not conform to that
     * syntax.
     */
    std::map<char, std::string> parse_regular_command(const std::string &cmd);

    /**
     * Processes a command. Returns whether processing is complete.
     */
    bool command(const std::string &cmd);

public:

    /**
     * Parses an NC drill file.
     */
    NCDrill(std::istream &s, bool default_plated=true);

    /**
     * Returns the cutout paths for this NC drill file as negatively-wound
     * polygons.
     */
    coord::Paths get_paths(bool plated=true, bool unplated=true) const;

    /**
     * Returns the center coordinates of all plated holes.
     */
    const std::list<coord::CPt> &get_vias() const;

};

} // namespace ncdrill
